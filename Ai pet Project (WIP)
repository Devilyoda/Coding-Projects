import pygame
import pyautogui
import random
import time
import os
import subprocess

# Initialize Pygame
pygame.init()

# Set up screen dimensions
SCREEN_WIDTH, SCREEN_HEIGHT = pyautogui.size()
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT), pygame.NOFRAME)
pygame.display.set_caption("Sith Green Warrior AI Pet")

# Load sprites
sprite = pygame.image.load("green_warrior.png")  # Placeholder
sprite = pygame.transform.scale(sprite, (100, 100))
meditating_sprite = pygame.image.load("meditating.png")
floating_sprite = pygame.image.load("floating.png")
frog_sprite = pygame.image.load("frog.png")
lightsaber_sprite = pygame.image.load("lightsaber_slash.png")
force_effect_sprite = pygame.image.load("force_effect.png")
lightning_sprite = pygame.image.load("lightning.png")
glowing_eyes_sprite = pygame.image.load("green_warrior_glow_eyes.png")
tattered_cloak_sprite = pygame.image.load("green_warrior_tattered_cloak.png")

# Load sound effects
lightsaber_sound = pygame.mixer.Sound("lightsaber.wav")
burp_sound = pygame.mixer.Sound("burp.wav")
force_pull_sound = pygame.mixer.Sound("force_pull.wav")

# Set initial position
x, y = random.randint(0, SCREEN_WIDTH - 100), random.randint(0, SCREEN_HEIGHT - 100)
velocity = 5
chaos_mode = False
idle_mode = True
idle_state = "meditating"

# Chat box settings
font = pygame.font.Font(None, 32)
input_box = pygame.Rect(10, SCREEN_HEIGHT - 40, 200, 30)
color_inactive = pygame.Color('lightskyblue3')
color_active = pygame.Color('dodgerblue2')
color = color_inactive
active = False
text = ''

# Lightning entrance control
first_entry = True

running = True
while running:
    screen.fill((0, 0, 0, 0))

    if first_entry:
        for _ in range(10):
            screen.blit(lightning_sprite, (x, y))
            pygame.display.update()
            time.sleep(0.05)
        first_entry = False

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_c:
                chaos_mode = not chaos_mode
                idle_mode = not chaos_mode
            elif event.key == pygame.K_RETURN:
                if text.lower() == "open chrome":
                    subprocess.run(["chrome.exe"])
                    print("Your weak mortal tools bore meâ€¦ but I will comply.")
                elif text.lower() == "close window":
                    pyautogui.hotkey('alt', 'f4')
                    print("Do not waste my power on such trivial tasks.")
                text = ''
            elif event.key == pygame.K_BACKSPACE:
                text = text[:-1]
            else:
                text += event.unicode

    cursor_x, cursor_y = pyautogui.position()

    if chaos_mode:
        force_x, force_y = x + 50, y + 50
        dx = (force_x - cursor_x) * 0.05
        dy = (force_y - cursor_y) * 0.05
        pyautogui.moveTo(cursor_x + dx, cursor_y + dy, duration=0.01)

        screen.blit(force_effect_sprite, (x, y))
        screen.blit(glowing_eyes_sprite, (x, y))
        screen.blit(tattered_cloak_sprite, (x, y))

        if random.random() < 0.01:
            force_pull_sound.play()
            print("You are drawn to me, as all things are...")

        if random.random() < 0.01:
            taunts = [
                "Execute Order 66!",
                "KENOBI!",
                "Then you will die!",
                "There is no mercy.",
                "I will pull the rebels apart, piece by piece.",
                "You can't run from the Dark Side. I shall return.",
                "Futile. Your destiny is already sealed.",
                "Running only hastens your fall."
            ]
            print(random.choice(taunts))

        if random.random() < 0.005:
            lightsaber_sound.play()
            screen.blit(lightsaber_sprite, (x + 50, y))
            pygame.draw.line(screen, (255, 69, 0), (0, y + 50), (SCREEN_WIDTH, y + 50), 6)
            print("Sith Green Warrior slices the screen with a burning saber!")

    elif idle_mode:
        if idle_state == "meditating":
            screen.blit(meditating_sprite, (x, y))
            if random.random() < 0.002:
                idle_state = "floating"
        elif idle_state == "floating":
            if abs(cursor_x - x) < 300 and abs(cursor_y - y) < 300:
                if cursor_x > x:
                    x += 2
                elif cursor_x < x:
                    x -= 2
                if cursor_y > y:
                    y += 2
                elif cursor_y < y:
                    y -= 2
            screen.blit(floating_sprite, (x, y))
            if random.random() < 0.002:
                idle_state = "frog_eating"
        elif idle_state == "frog_eating":
            screen.blit(frog_sprite, (x, y))
            time.sleep(1)
            burp_sound.play()
            idle_state = "meditating"
    else:
        screen.blit(sprite, (x, y))

    txt_surface = font.render(text, True, color)
    screen.blit(txt_surface, (input_box.x + 5, input_box.y + 5))
    pygame.draw.rect(screen, color, input_box, 2)

    pygame.display.update()
    time.sleep(0.01)

pygame.quit()
